{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Computational Biology Core Software Development Best Practices Here you will find templates and examples of how to produce and deploy documentation for projects, tutorials, and workshops by the Computational Biology Core. In addition you can find best-practices when creating projects on GitHub, README templates, a list of badges, examples of .travis.yml files for continuous integration and deployment.","title":"Home"},{"location":"#computational-biology-core","text":"","title":"Computational Biology Core"},{"location":"#software-development-best-practices","text":"Here you will find templates and examples of how to produce and deploy documentation for projects, tutorials, and workshops by the Computational Biology Core. In addition you can find best-practices when creating projects on GitHub, README templates, a list of badges, examples of .travis.yml files for continuous integration and deployment.","title":"Software Development Best Practices"},{"location":"README_template_software/","text":"Project Title Overview One paragraph project description goes here. Getting Started These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. Prerequisites What things you need to install the software and how to install them Give a list with links and how to install using code snippets. brew install ... npm install conda install ... Installing A step by step on how to install the package. Say what the step will be Give the example And repeat until finished End with an example of getting some data out of the system or using it for a little demo Tests Explain how to run the automated tests for this system Deployment Add additional notes about how to deploy this on a local machine and in a cloud provider. Contributing Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us. Release History 0.4 CHANGES: 0.3 CHANGES: Authors List authors and affiliation.","title":"Project Title"},{"location":"README_template_software/#project-title","text":"","title":"Project Title"},{"location":"README_template_software/#overview","text":"One paragraph project description goes here.","title":"Overview"},{"location":"README_template_software/#getting-started","text":"These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.","title":"Getting Started"},{"location":"README_template_software/#prerequisites","text":"What things you need to install the software and how to install them Give a list with links and how to install using code snippets. brew install ... npm install conda install ...","title":"Prerequisites"},{"location":"README_template_software/#installing","text":"A step by step on how to install the package. Say what the step will be Give the example And repeat until finished End with an example of getting some data out of the system or using it for a little demo","title":"Installing"},{"location":"README_template_software/#tests","text":"Explain how to run the automated tests for this system","title":"Tests"},{"location":"README_template_software/#deployment","text":"Add additional notes about how to deploy this on a local machine and in a cloud provider.","title":"Deployment"},{"location":"README_template_software/#contributing","text":"Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us.","title":"Contributing"},{"location":"README_template_software/#release-history","text":"0.4 CHANGES: 0.3 CHANGES:","title":"Release History"},{"location":"README_template_software/#authors","text":"List authors and affiliation.","title":"Authors"},{"location":"README_template_workshop/","text":"Workshop / Tutorial Title Overview One Paragraph of project description goes here Date: Location: Getting started Step by step with code on how to get up and running. References 1 . 2 . Authors Other workshops and tutorials Links to other workshops (Documentation and GitHub) Workshop 1 Workshop 2 Tutorial 1","title":"Workshop / Tutorial Title"},{"location":"README_template_workshop/#workshop-tutorial-title","text":"","title":"Workshop / Tutorial Title"},{"location":"README_template_workshop/#overview","text":"One Paragraph of project description goes here Date: Location:","title":"Overview"},{"location":"README_template_workshop/#getting-started","text":"Step by step with code on how to get up and running.","title":"Getting started"},{"location":"README_template_workshop/#references","text":"1 . 2 .","title":"References"},{"location":"README_template_workshop/#authors","text":"","title":"Authors"},{"location":"README_template_workshop/#other-workshops-and-tutorials","text":"Links to other workshops (Documentation and GitHub) Workshop 1 Workshop 2 Tutorial 1","title":"Other workshops and tutorials"},{"location":"badges/","text":"List of badges Use the appropriate badges at the top of your README.md file, after the project title. Travis CI [![Travis](https://img.shields.io/travis/compbiocore/REPOSITORY_NAME.svg?style=flat-square)(LINK) Code Coverage Coveralls [![Coveralls](https://img.shields.io/coveralls/compbiocore/REPOSITORY_NAME.svg?style=flat-square)](LINK) Codecov [![coverage](https://img.shields.io/codecov/c/github/compbiocore/REPOSITORY_NAME.svg?style=flat-square)](LINK) Documentation [![Docs](https://img.shields.io/badge/docs-stable-steelblue.svg?style=flat-square)](https://compbiocore.github.io/REPOSITORY_NAME) Jupyter Notebooks [![nbviewer](https://img.shields.io/badge/jupyter_notebooks-nbviewer-purple.svg?style=flat-square)](http://nbviewer.jupyter.org/github/compbiocore/REPOSITORY_NAME/) Licenses [![License](https://img.shields.io/badge/LICENSE_STRING-orange.svg?style=flat-square)](LINK) Where LICENSE_STRING: - MIT = license-MIT - BSD 3-Clause = License-BSD%203--Clause Conda [![Conda](https://img.shields.io/conda/v/compbiocore/PACKAGE_NAME.svg?style=flat-square)](https://anaconda.org/compbiocore/PACAKGE_NAME) Other For badges that are not listed here, refer to Shields.io , make sure to use style=flat-square to be consistent with the other badges.","title":"List of badges"},{"location":"badges/#list-of-badges","text":"Use the appropriate badges at the top of your README.md file, after the project title.","title":"List of badges"},{"location":"badges/#travis-ci","text":"[![Travis](https://img.shields.io/travis/compbiocore/REPOSITORY_NAME.svg?style=flat-square)(LINK)","title":"Travis CI"},{"location":"badges/#code-coverage","text":"","title":"Code Coverage"},{"location":"badges/#coveralls","text":"[![Coveralls](https://img.shields.io/coveralls/compbiocore/REPOSITORY_NAME.svg?style=flat-square)](LINK)","title":"Coveralls"},{"location":"badges/#codecov","text":"[![coverage](https://img.shields.io/codecov/c/github/compbiocore/REPOSITORY_NAME.svg?style=flat-square)](LINK)","title":"Codecov"},{"location":"badges/#documentation","text":"[![Docs](https://img.shields.io/badge/docs-stable-steelblue.svg?style=flat-square)](https://compbiocore.github.io/REPOSITORY_NAME)","title":"Documentation"},{"location":"badges/#jupyter-notebooks","text":"[![nbviewer](https://img.shields.io/badge/jupyter_notebooks-nbviewer-purple.svg?style=flat-square)](http://nbviewer.jupyter.org/github/compbiocore/REPOSITORY_NAME/)","title":"Jupyter Notebooks"},{"location":"badges/#licenses","text":"[![License](https://img.shields.io/badge/LICENSE_STRING-orange.svg?style=flat-square)](LINK) Where LICENSE_STRING: - MIT = license-MIT - BSD 3-Clause = License-BSD%203--Clause","title":"Licenses"},{"location":"badges/#conda","text":"[![Conda](https://img.shields.io/conda/v/compbiocore/PACKAGE_NAME.svg?style=flat-square)](https://anaconda.org/compbiocore/PACAKGE_NAME)","title":"Conda"},{"location":"badges/#other","text":"For badges that are not listed here, refer to Shields.io , make sure to use style=flat-square to be consistent with the other badges.","title":"Other"},{"location":"index_site/","text":"Setting up your repo for the index website The index website https://compbiocore.github.io is continuously deployed by Travis CI. In order to have a tile on the website with your project's info, create a YAML file called ready.yml in the root of your project: repo : refchef site_name : RefChef authors : - name : Andrew Leith github_user : andrew-leith - name : Fernando Gelin github_user : fernandogelin repo_url : https://github.com/compbiocore/bioflows # not required if repo is part of compbiocore organization. site_description : Short description of project, workshop, tutorial, or document. # make sure the description is within quotes, specially if there are special characters on it. docs_url : https://compbiocore.github.io/bioflows doi : 10.1007/978-3-319-76207-4_15 # if the project has a related publication. type : software # required. choose one of [software, tutorial, workshop, documentation] pypi : true # if project is on pypi Example of card generated from the yaml above:","title":"Continuous Deployment"},{"location":"index_site/#setting-up-your-repo-for-the-index-website","text":"The index website https://compbiocore.github.io is continuously deployed by Travis CI. In order to have a tile on the website with your project's info, create a YAML file called ready.yml in the root of your project: repo : refchef site_name : RefChef authors : - name : Andrew Leith github_user : andrew-leith - name : Fernando Gelin github_user : fernandogelin repo_url : https://github.com/compbiocore/bioflows # not required if repo is part of compbiocore organization. site_description : Short description of project, workshop, tutorial, or document. # make sure the description is within quotes, specially if there are special characters on it. docs_url : https://compbiocore.github.io/bioflows doi : 10.1007/978-3-319-76207-4_15 # if the project has a related publication. type : software # required. choose one of [software, tutorial, workshop, documentation] pypi : true # if project is on pypi Example of card generated from the yaml above:","title":"Setting up your repo for the index website"},{"location":"mkdocs/","text":"We use MkDocs with Material design for documentation. MkDocs is a powerful static site generator. The user provides Markdown files and a .yml configuration file to get started. The Material theme has a modern, responsive, and intuitive interface to complex documentation. Note Note that you will need to do this only if you want to build your site locally to preview your docs. You won't be deploying it from your local machine. We use continuous deployment with Travis CI to build and deploy the documentation to GitHub Pages, see Deployment section. To install MkDocs and MkDocs-Material: pip install mkdocs==1 mkdocs-material==3.0.3 Create your document files and mkdocs.yml configuration file (see below), and: mkdocs build mkdocs serve Navigate to http://127.0.0.1:8000/ to preview your docs. Documentation Structure The documentation should go in the docs/ folder in the root of your GitHub project. Assets like images or with other formats should go in docs/assests . The document files should be Markdown. The organization of the pages in the static site is set in the configuration file mkdocs.yml , this file also goes in the root of the project. Note Note that all CBC projects should have the site_url option set to https://compbiocore.github.io/ . This will set the link on the logo to the main porjects site instead. site_name : Computational Biology Core - Brown University site_author : Fernando Gelin repo_url : https://github.com/compbiocore/cbc-documentation-templates site_description : Documentation templates and best-practices for Brown s Computational Biology Core. site_url : https://compbiocore.github.io/ #this is the main site! theme : name : material palette : primary : blue grey accent : indigo logo : images/cbc-logo.svg extra_css : - styles/dark_mode.css markdown_extensions : - extra - tables - fenced_code - admonition - codehilite - footnotes nav : - Home : index.md - Templates for GitHub : readme.md - Documentation : mkdocs.md Tip Go to Markdows Extensions for Material to see detailed information on how to use some of the extensions listed in markdown_extensions above. Documentation Structure for R packages For R packages that use roxygen2 to generate documentation in man/*.Rd the set up is a little different. You will still need a mkdocs.yml file in your root directory as shown above, but in the pages section of the mkdocs.yml use the file names from your man/ and vignettes/ directories, but change the extension to .md . Attention The line - Home: 'index.md' is required for R packages. That page will include the contents of the README.md associated with the package. Also in your root directory create a file called make.R that contains: # Script to convert .Rd and .Rmd files from man/ and vignettes to docs/*.md for use by MkDocs library ( Rd2md ) library ( knitr ) path = man/ files = dir ( path ) for ( file in files ){ infile = file.path ( path , file ) outfile = file.path ( docs , gsub ( .Rd , .md , file )) Rd2markdown ( infile , outfile , append = FALSE ) } vignette_file = dir ( vignettes/ ) Rmds = vignette_file [grep ( .Rmd , vignette_file ) ] in_ = file.path ( vignettes , Rmds ) out_ = file.path ( docs , gsub ( .Rmd , .md , Rmds )) knit ( in_ , out_ ) file_rename = function ( from , to ) { todir = dirname ( to ) if ( ! isTRUE ( file.info ( todir ) $ isdir )) dir.create ( todir , recursive = TRUE ) file.rename ( from = from , to = to ) } figures = dir ( figure/ ) for ( f in figures ){ file_rename ( from = file.path ( figure , f ), to = file.path ( docs , figure , f )) } file_rename ( from = file.path ( README.md ), to = file.path ( docs , index.md )) This script will convert all .Rd and .Rmd files from man/ and vignettes/ and place them in a new folder called docs/ . The vignettes will run on Travis, and the figures will also be placed in the docs/ folder. MkDocs will use the markdown files from that folder to create the final documentation site. Deployment Documentation is deployed continuously with Travis CI , so you don't need to install MkDocs, although you will have to install it locally if you want to preview your documentation before it's deployed. To set up continuous deployment to the project's gh-pages branch, you first need to obtain a GitHub token from GitHub: Then, on your project's Travis settings, set the environment variable GITHUB_TOKEN and DO NOT check the box to display value during build. Attention If you're using the R set up, use the key GITHUB_PAT instead of GITHUB_TOKEN . Edit your .travis.yml file to use matrix, so we can separate the test and build stages. The test stage is what you would normally run. Tests set up can vary, see Travis CI docs for more information. For the deploy stage, use the set up outlined below. Here we use MkDocs to build the documentation and deploy to GitHub Pages. Note that all the CBC docs should have the CBC logo and a custom style for code blocks. The first six lines in the script section uses the GitHub API to retrieve the css and svg so MkDocs can render the documentation site correctly. matrix : #allows to set up tests/deploys in different languages/environments. include : #includes all stages of build - stage : deploy # this block builds and deploys the docs, it s in Python. language : python sudo : required dist : trusty install : - sudo apt-get install jq - pip install mkdocs==1 - pip install mkdocs-material==3.0.3 script : - mkdir docs/styles - mkdir docs/images - curl https://api.github.com/repos/compbiocore/cbc-documentation-templates/contents/files/dark_mode.css\\?access_token\\=$GITHUB_TOKEN dark_mode.json - jq -r .content dark_mode.json | base64 --decode docs/styles/dark_mode.css - curl https://api.github.com/repos/compbiocore/cbc-documentation-templates/contents/files/cbc-logo.svg\\?access_token\\=$GITHUB_TOKEN logo.json - jq -r .content logo.json | base64 --decode docs/images/cbc-logo.svg - mkdocs build --verbose --clean --strict deploy : provider : pages skip_cleanup : true github_token : $GITHUB_TOKEN local_dir : site on : branch : master Warning If you are using the R set up described above, use the following travis set up for the deploy stage: matrix : include : #allows to set up tests/deploys in different languages/environments. - stage : deploy # this block builds and deploys the docs, it s in Python. language : python sudo : required dist : trusty install : - sudo apt-get install jq - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh; - bash miniconda.sh -b -p $HOME/miniconda - export PATH= $HOME/miniconda/bin:$PATH - hash -r - conda config --set always_yes yes --set changeps1 no - conda update -q conda - conda info -a - conda create -q -n test-env python=$TRAVIS_PYTHON_VERSION - source activate test-env - pip install mkdocs==1 mkdocs-material==3.0.3 - conda install r-knitr r-devtools - R -e remove.packages(c( curl , httr )); install.packages(c( curl , httr ), repos= http://cran.us.r-project.org ); Sys.setenv(CURL_CA_BUNDLE= /utils/microsoft-r-open-3.5.0/lib64/R/lib/microsoft-r-cacert.pem ) - R -e install.packages( Rd2md , repos= http://cran.us.r-project.org ) - R -e source( https://bioconductor.org/biocLite.R ); biocLite( BiocInstaller ); library(devtools); install_github( compbiocore/qckitfastq ,build_vignettes=FALSE) before_script : - source activate test-env script : - mkdir docs - Rscript make.R - mkdir docs/styles - mkdir docs/images - curl https://api.github.com/repos/compbiocore/cbc-documentation-templates/contents/files/dark_mode.css\\?access_token\\=$GITHUB_PAT dark_mode.json - jq -r .content dark_mode.json | base64 --decode docs/styles/dark_mode.css - curl https://api.github.com/repos/compbiocore/cbc-documentation-templates/contents/files/cbc-logo.svg\\?access_token\\=$GITHUB_PAT logo.json - jq -r .content logo.json | base64 --decode docs/images/cbc-logo.svg - mkdocs build --verbose --clean --strict deploy : provider : pages skip_cleanup : true github_token : $GITHUB_PAT local_dir : site on : branch : master Travis will show all stages separately: Done! Your documentation site will be available at https://compbiocore.github.io/project-name/ .","title":"Documentation Set Up"},{"location":"mkdocs/#documentation-structure","text":"The documentation should go in the docs/ folder in the root of your GitHub project. Assets like images or with other formats should go in docs/assests . The document files should be Markdown. The organization of the pages in the static site is set in the configuration file mkdocs.yml , this file also goes in the root of the project. Note Note that all CBC projects should have the site_url option set to https://compbiocore.github.io/ . This will set the link on the logo to the main porjects site instead. site_name : Computational Biology Core - Brown University site_author : Fernando Gelin repo_url : https://github.com/compbiocore/cbc-documentation-templates site_description : Documentation templates and best-practices for Brown s Computational Biology Core. site_url : https://compbiocore.github.io/ #this is the main site! theme : name : material palette : primary : blue grey accent : indigo logo : images/cbc-logo.svg extra_css : - styles/dark_mode.css markdown_extensions : - extra - tables - fenced_code - admonition - codehilite - footnotes nav : - Home : index.md - Templates for GitHub : readme.md - Documentation : mkdocs.md Tip Go to Markdows Extensions for Material to see detailed information on how to use some of the extensions listed in markdown_extensions above.","title":"Documentation Structure"},{"location":"mkdocs/#documentation-structure-for-r-packages","text":"For R packages that use roxygen2 to generate documentation in man/*.Rd the set up is a little different. You will still need a mkdocs.yml file in your root directory as shown above, but in the pages section of the mkdocs.yml use the file names from your man/ and vignettes/ directories, but change the extension to .md . Attention The line - Home: 'index.md' is required for R packages. That page will include the contents of the README.md associated with the package. Also in your root directory create a file called make.R that contains: # Script to convert .Rd and .Rmd files from man/ and vignettes to docs/*.md for use by MkDocs library ( Rd2md ) library ( knitr ) path = man/ files = dir ( path ) for ( file in files ){ infile = file.path ( path , file ) outfile = file.path ( docs , gsub ( .Rd , .md , file )) Rd2markdown ( infile , outfile , append = FALSE ) } vignette_file = dir ( vignettes/ ) Rmds = vignette_file [grep ( .Rmd , vignette_file ) ] in_ = file.path ( vignettes , Rmds ) out_ = file.path ( docs , gsub ( .Rmd , .md , Rmds )) knit ( in_ , out_ ) file_rename = function ( from , to ) { todir = dirname ( to ) if ( ! isTRUE ( file.info ( todir ) $ isdir )) dir.create ( todir , recursive = TRUE ) file.rename ( from = from , to = to ) } figures = dir ( figure/ ) for ( f in figures ){ file_rename ( from = file.path ( figure , f ), to = file.path ( docs , figure , f )) } file_rename ( from = file.path ( README.md ), to = file.path ( docs , index.md )) This script will convert all .Rd and .Rmd files from man/ and vignettes/ and place them in a new folder called docs/ . The vignettes will run on Travis, and the figures will also be placed in the docs/ folder. MkDocs will use the markdown files from that folder to create the final documentation site.","title":"Documentation Structure for R packages"},{"location":"mkdocs/#deployment","text":"Documentation is deployed continuously with Travis CI , so you don't need to install MkDocs, although you will have to install it locally if you want to preview your documentation before it's deployed. To set up continuous deployment to the project's gh-pages branch, you first need to obtain a GitHub token from GitHub: Then, on your project's Travis settings, set the environment variable GITHUB_TOKEN and DO NOT check the box to display value during build. Attention If you're using the R set up, use the key GITHUB_PAT instead of GITHUB_TOKEN . Edit your .travis.yml file to use matrix, so we can separate the test and build stages. The test stage is what you would normally run. Tests set up can vary, see Travis CI docs for more information. For the deploy stage, use the set up outlined below. Here we use MkDocs to build the documentation and deploy to GitHub Pages. Note that all the CBC docs should have the CBC logo and a custom style for code blocks. The first six lines in the script section uses the GitHub API to retrieve the css and svg so MkDocs can render the documentation site correctly. matrix : #allows to set up tests/deploys in different languages/environments. include : #includes all stages of build - stage : deploy # this block builds and deploys the docs, it s in Python. language : python sudo : required dist : trusty install : - sudo apt-get install jq - pip install mkdocs==1 - pip install mkdocs-material==3.0.3 script : - mkdir docs/styles - mkdir docs/images - curl https://api.github.com/repos/compbiocore/cbc-documentation-templates/contents/files/dark_mode.css\\?access_token\\=$GITHUB_TOKEN dark_mode.json - jq -r .content dark_mode.json | base64 --decode docs/styles/dark_mode.css - curl https://api.github.com/repos/compbiocore/cbc-documentation-templates/contents/files/cbc-logo.svg\\?access_token\\=$GITHUB_TOKEN logo.json - jq -r .content logo.json | base64 --decode docs/images/cbc-logo.svg - mkdocs build --verbose --clean --strict deploy : provider : pages skip_cleanup : true github_token : $GITHUB_TOKEN local_dir : site on : branch : master Warning If you are using the R set up described above, use the following travis set up for the deploy stage: matrix : include : #allows to set up tests/deploys in different languages/environments. - stage : deploy # this block builds and deploys the docs, it s in Python. language : python sudo : required dist : trusty install : - sudo apt-get install jq - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh; - bash miniconda.sh -b -p $HOME/miniconda - export PATH= $HOME/miniconda/bin:$PATH - hash -r - conda config --set always_yes yes --set changeps1 no - conda update -q conda - conda info -a - conda create -q -n test-env python=$TRAVIS_PYTHON_VERSION - source activate test-env - pip install mkdocs==1 mkdocs-material==3.0.3 - conda install r-knitr r-devtools - R -e remove.packages(c( curl , httr )); install.packages(c( curl , httr ), repos= http://cran.us.r-project.org ); Sys.setenv(CURL_CA_BUNDLE= /utils/microsoft-r-open-3.5.0/lib64/R/lib/microsoft-r-cacert.pem ) - R -e install.packages( Rd2md , repos= http://cran.us.r-project.org ) - R -e source( https://bioconductor.org/biocLite.R ); biocLite( BiocInstaller ); library(devtools); install_github( compbiocore/qckitfastq ,build_vignettes=FALSE) before_script : - source activate test-env script : - mkdir docs - Rscript make.R - mkdir docs/styles - mkdir docs/images - curl https://api.github.com/repos/compbiocore/cbc-documentation-templates/contents/files/dark_mode.css\\?access_token\\=$GITHUB_PAT dark_mode.json - jq -r .content dark_mode.json | base64 --decode docs/styles/dark_mode.css - curl https://api.github.com/repos/compbiocore/cbc-documentation-templates/contents/files/cbc-logo.svg\\?access_token\\=$GITHUB_PAT logo.json - jq -r .content logo.json | base64 --decode docs/images/cbc-logo.svg - mkdocs build --verbose --clean --strict deploy : provider : pages skip_cleanup : true github_token : $GITHUB_PAT local_dir : site on : branch : master Travis will show all stages separately: Done! Your documentation site will be available at https://compbiocore.github.io/project-name/ .","title":"Deployment"},{"location":"readme/","text":"Templates for Github Use these README templates when creating a GitHub repository. You can find the README templates on GitHub or download them here. README for Software Raw template Project Title Overview One paragraph project description goes here. Getting Started These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. Prerequisites What things you need to install the software and how to install them Give a list with links and how to install using code snippets. brew install ... npm install conda install ... Installing A step by step on how to install the package. Say what the step will be Give the example And repeat until finished End with an example of getting some data out of the system or using it for a little demo Tests Explain how to run the automated tests for this system Deployment Add additional notes about how to deploy this on a local machine and in a cloud provider. Contributing Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us. Release History 0.4 CHANGES: 0.3 CHANGES: Authors List authors and affiliation. README for Workshops Raw template Workshop / Tutorial Title Overview One Paragraph of project description goes here Date: Location: Getting started Step by step with code on how to get up and running. References 1 . 2 . Authors Other workshops and tutorials Links to other workshops (Documentation and GitHub) Workshop 1 Workshop 2 Tutorial 1 Badges List of badges Use the appropriate badges at the top of your README.md file, after the project title. Travis CI [![Travis](https://img.shields.io/travis/compbiocore/REPOSITORY_NAME.svg?style=flat-square)(LINK) Code Coverage Coveralls [![Coveralls](https://img.shields.io/coveralls/compbiocore/REPOSITORY_NAME.svg?style=flat-square)](LINK) Codecov [![coverage](https://img.shields.io/codecov/c/github/compbiocore/REPOSITORY_NAME.svg?style=flat-square)](LINK) Documentation [![Docs](https://img.shields.io/badge/docs-stable-steelblue.svg?style=flat-square)](https://compbiocore.github.io/REPOSITORY_NAME) Jupyter Notebooks [![nbviewer](https://img.shields.io/badge/jupyter_notebooks-nbviewer-purple.svg?style=flat-square)](http://nbviewer.jupyter.org/github/compbiocore/REPOSITORY_NAME/) Licenses [![License](https://img.shields.io/badge/LICENSE_STRING-orange.svg?style=flat-square)](LINK) Where LICENSE_STRING: - MIT = license-MIT - BSD 3-Clause = License-BSD%203--Clause Conda [![Conda](https://img.shields.io/conda/v/compbiocore/PACKAGE_NAME.svg?style=flat-square)](https://anaconda.org/compbiocore/PACAKGE_NAME)","title":"Templates"},{"location":"readme/#templates-for-github","text":"Use these README templates when creating a GitHub repository. You can find the README templates on GitHub or download them here.","title":"Templates for Github"},{"location":"readme/#readme-for-software","text":"Raw template","title":"README for Software"},{"location":"readme/#project-title","text":"","title":"Project Title"},{"location":"readme/#overview","text":"One paragraph project description goes here.","title":"Overview"},{"location":"readme/#getting-started","text":"These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.","title":"Getting Started"},{"location":"readme/#prerequisites","text":"What things you need to install the software and how to install them Give a list with links and how to install using code snippets. brew install ... npm install conda install ...","title":"Prerequisites"},{"location":"readme/#installing","text":"A step by step on how to install the package. Say what the step will be Give the example And repeat until finished End with an example of getting some data out of the system or using it for a little demo","title":"Installing"},{"location":"readme/#tests","text":"Explain how to run the automated tests for this system","title":"Tests"},{"location":"readme/#deployment","text":"Add additional notes about how to deploy this on a local machine and in a cloud provider.","title":"Deployment"},{"location":"readme/#contributing","text":"Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us.","title":"Contributing"},{"location":"readme/#release-history","text":"0.4 CHANGES: 0.3 CHANGES:","title":"Release History"},{"location":"readme/#authors","text":"List authors and affiliation.","title":"Authors"},{"location":"readme/#readme-for-workshops","text":"Raw template","title":"README for Workshops"},{"location":"readme/#workshop-tutorial-title","text":"","title":"Workshop / Tutorial Title"},{"location":"readme/#overview_1","text":"One Paragraph of project description goes here Date: Location:","title":"Overview"},{"location":"readme/#getting-started_1","text":"Step by step with code on how to get up and running.","title":"Getting started"},{"location":"readme/#references","text":"1 . 2 .","title":"References"},{"location":"readme/#authors_1","text":"","title":"Authors"},{"location":"readme/#other-workshops-and-tutorials","text":"Links to other workshops (Documentation and GitHub) Workshop 1 Workshop 2 Tutorial 1","title":"Other workshops and tutorials"},{"location":"readme/#badges","text":"","title":"Badges"},{"location":"readme/#list-of-badges","text":"Use the appropriate badges at the top of your README.md file, after the project title.","title":"List of badges"},{"location":"readme/#travis-ci","text":"[![Travis](https://img.shields.io/travis/compbiocore/REPOSITORY_NAME.svg?style=flat-square)(LINK)","title":"Travis CI"},{"location":"readme/#code-coverage","text":"","title":"Code Coverage"},{"location":"readme/#coveralls","text":"[![Coveralls](https://img.shields.io/coveralls/compbiocore/REPOSITORY_NAME.svg?style=flat-square)](LINK)","title":"Coveralls"},{"location":"readme/#codecov","text":"[![coverage](https://img.shields.io/codecov/c/github/compbiocore/REPOSITORY_NAME.svg?style=flat-square)](LINK)","title":"Codecov"},{"location":"readme/#documentation","text":"[![Docs](https://img.shields.io/badge/docs-stable-steelblue.svg?style=flat-square)](https://compbiocore.github.io/REPOSITORY_NAME)","title":"Documentation"},{"location":"readme/#jupyter-notebooks","text":"[![nbviewer](https://img.shields.io/badge/jupyter_notebooks-nbviewer-purple.svg?style=flat-square)](http://nbviewer.jupyter.org/github/compbiocore/REPOSITORY_NAME/)","title":"Jupyter Notebooks"},{"location":"readme/#licenses","text":"[![License](https://img.shields.io/badge/LICENSE_STRING-orange.svg?style=flat-square)](LINK) Where LICENSE_STRING: - MIT = license-MIT - BSD 3-Clause = License-BSD%203--Clause","title":"Licenses"},{"location":"readme/#conda","text":"[![Conda](https://img.shields.io/conda/v/compbiocore/PACKAGE_NAME.svg?style=flat-square)](https://anaconda.org/compbiocore/PACAKGE_NAME)","title":"Conda"},{"location":"semantic_release/","text":"Introduction semantic-release is used to automate the package release workflow. It determines the next version number, generates the release notes and publishes the package. semantic-release uses the commit messages to determine the type of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number (major.minor.patch), creates a tag and a release on GitHub, generates a changelog, and publishes the release. Conventional Commit Messages The commit messages need to be standard, we use the Angular Commit Message Conventions . To enforce these rules, we use the package commitizen . To install commitizen: pip install commitizen To use it: git add . cz commit #this replaces the usual git commit -m Then, follow the CLI instructions using the up/down arrows to create your commit message. \u276f feat: A new feature fix: A bug fix docs: Documentation only changes style: Changes that do not affect the meaning of the code ( white-space, formatting, missing semi-colons, etc ) refactor: A code change that neither fixes a bug nor adds a feature perf: A code change that improves performance test: Adding missing or correcting existing tests chore: Changes to the build process or auxiliary tools and libraries such as documentation generation, ci, etc After selecting the type of change you'll be prompted to type the scope, title, body, and footer for the commit message. Make sure to read the Angular Commit Message Conventions and Conventional Commits for a more in depth explanation and examples. Important It's important to note that this practice works best with the GitFlow branching model for Git. semantic-release will try to create a new version whenever the master branch is updated. Project Set Up setup.cfg In the setup.cfg , add: [semantic_release] version_variable = project_name/__init__.py:__version__ This will allow semantic-release to find the version number for the project, and updated that file when a new release is created. Note This is language and project specific. So make sure you change that to reflect your project. For julia projects, create a setup.cfg file: [semantic_release] version_variable = Project.toml:version upload_to_pypi = false Travis CI semantic-release works best when integrated with a CI service. To set up your package for semantic-release, add an environment variable to Travis' settings with a Github token called GH_TOKEN , and add the following block to your .travis.yml : Important For Python packages that are published on pypi.org, add the variables PYPI_USERNAME and PYPI_PASSWORD to the Travis environment. If you do not want to publish to pypi, set upload_to_pypi=false in your setup.cfg file. In addition, the README should be in .rst instead of .md , or it won't show up correctly on pypi.org. Note semantic-release and commitizen are Python packages, but this set-up is helpful for packages developed in other languages. matrix : include : - stage : semantic release if : branch = master AND type != pull_request language : python os : linux python : 3.6 install : - pip install typing - pip install python-semantic-release before_script : skip # optional, skip if you have a global before_script script : - git config --global user.name semantic-release (via TravisCI) - git config --global user.email semantic-release@travis - semantic-release publish after_script : skip # optional, skip if you have a global after_script after_success : skip # optional, skip if you have a global after_success Or, if the package is in Python, add an after_success . Attention If your package does not support Python 3.6, the previous should be used so the test stage and the semantic release stage can be set with different Python versions. after_success : - git config --global user.name semantic-release (via TravisCI) - git config --global user.email semantic-release@travis - pip install typing - pip install python-semantic-release - semantic-release publish","title":"Semantic Release"},{"location":"semantic_release/#introduction","text":"semantic-release is used to automate the package release workflow. It determines the next version number, generates the release notes and publishes the package. semantic-release uses the commit messages to determine the type of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number (major.minor.patch), creates a tag and a release on GitHub, generates a changelog, and publishes the release.","title":"Introduction"},{"location":"semantic_release/#conventional-commit-messages","text":"The commit messages need to be standard, we use the Angular Commit Message Conventions . To enforce these rules, we use the package commitizen . To install commitizen: pip install commitizen To use it: git add . cz commit #this replaces the usual git commit -m Then, follow the CLI instructions using the up/down arrows to create your commit message. \u276f feat: A new feature fix: A bug fix docs: Documentation only changes style: Changes that do not affect the meaning of the code ( white-space, formatting, missing semi-colons, etc ) refactor: A code change that neither fixes a bug nor adds a feature perf: A code change that improves performance test: Adding missing or correcting existing tests chore: Changes to the build process or auxiliary tools and libraries such as documentation generation, ci, etc After selecting the type of change you'll be prompted to type the scope, title, body, and footer for the commit message. Make sure to read the Angular Commit Message Conventions and Conventional Commits for a more in depth explanation and examples. Important It's important to note that this practice works best with the GitFlow branching model for Git. semantic-release will try to create a new version whenever the master branch is updated.","title":"Conventional Commit Messages"},{"location":"semantic_release/#project-set-up","text":"","title":"Project Set Up"},{"location":"semantic_release/#setupcfg","text":"In the setup.cfg , add: [semantic_release] version_variable = project_name/__init__.py:__version__ This will allow semantic-release to find the version number for the project, and updated that file when a new release is created. Note This is language and project specific. So make sure you change that to reflect your project. For julia projects, create a setup.cfg file: [semantic_release] version_variable = Project.toml:version upload_to_pypi = false","title":"setup.cfg"},{"location":"semantic_release/#travis-ci","text":"semantic-release works best when integrated with a CI service. To set up your package for semantic-release, add an environment variable to Travis' settings with a Github token called GH_TOKEN , and add the following block to your .travis.yml : Important For Python packages that are published on pypi.org, add the variables PYPI_USERNAME and PYPI_PASSWORD to the Travis environment. If you do not want to publish to pypi, set upload_to_pypi=false in your setup.cfg file. In addition, the README should be in .rst instead of .md , or it won't show up correctly on pypi.org. Note semantic-release and commitizen are Python packages, but this set-up is helpful for packages developed in other languages. matrix : include : - stage : semantic release if : branch = master AND type != pull_request language : python os : linux python : 3.6 install : - pip install typing - pip install python-semantic-release before_script : skip # optional, skip if you have a global before_script script : - git config --global user.name semantic-release (via TravisCI) - git config --global user.email semantic-release@travis - semantic-release publish after_script : skip # optional, skip if you have a global after_script after_success : skip # optional, skip if you have a global after_success Or, if the package is in Python, add an after_success . Attention If your package does not support Python 3.6, the previous should be used so the test stage and the semantic release stage can be set with different Python versions. after_success : - git config --global user.name semantic-release (via TravisCI) - git config --global user.email semantic-release@travis - pip install typing - pip install python-semantic-release - semantic-release publish","title":"Travis CI"}]}